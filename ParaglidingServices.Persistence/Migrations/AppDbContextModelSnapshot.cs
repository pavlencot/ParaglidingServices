// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParaglidingServices.Persistence.Data;

namespace ParaglidingServices.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BookingLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("InstructorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingLocationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CouponId")
                        .IsUnique();

                    b.HasIndex("InstructorId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.BookingLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StartLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookingLocations");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Competition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompetitionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.CompetitionOrganizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("CompetitionOrganizers");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.FlightSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<long?>("PilotInstructorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PilotInstructorId");

                    b.ToTable("FlightSchedules");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Licence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("LicenceNr")
                        .HasMaxLength(30)
                        .HasColumnType("bigint");

                    b.Property<long>("PilotId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PilotId")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Organizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrganizationCode")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompetitionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PilotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PilotId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Pilot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Pilots");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pilot");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.PilotInstructor", b =>
                {
                    b.HasBaseType("ParaglidingServices.Domain.Entities.Pilot");

                    b.HasDiscriminator().HasValue("PilotInstructor");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Booking", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.BookingLocation", "BookingLocation")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParaglidingServices.Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParaglidingServices.Domain.Entities.Coupon", "Coupon")
                        .WithOne("Booking")
                        .HasForeignKey("ParaglidingServices.Domain.Entities.Booking", "CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParaglidingServices.Domain.Entities.PilotInstructor", "Instructor")
                        .WithMany("Bookings")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingLocation");

                    b.Navigation("Client");

                    b.Navigation("Coupon");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Competition", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.Location", "Location")
                        .WithMany("Competitions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.CompetitionOrganizer", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.Competition", "Competition")
                        .WithMany("CompetitionOrganizers")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParaglidingServices.Domain.Entities.Organizer", "Organizer")
                        .WithMany("CompetitionOrganizer")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.FlightSchedule", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.PilotInstructor", null)
                        .WithMany("FlightSchedules")
                        .HasForeignKey("PilotInstructorId");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Licence", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.Pilot", "Pilot")
                        .WithOne("Licence")
                        .HasForeignKey("ParaglidingServices.Domain.Entities.Licence", "PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pilot");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Participant", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.Competition", "Competition")
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParaglidingServices.Domain.Entities.Pilot", "Pilot")
                        .WithMany("Participants")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Pilot");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Pilot", b =>
                {
                    b.HasOne("ParaglidingServices.Domain.Entities.Location", "Location")
                        .WithMany("Pilots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.BookingLocation", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Competition", b =>
                {
                    b.Navigation("CompetitionOrganizers");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Location", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Pilots");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Organizer", b =>
                {
                    b.Navigation("CompetitionOrganizer");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.Pilot", b =>
                {
                    b.Navigation("Licence");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ParaglidingServices.Domain.Entities.PilotInstructor", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FlightSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
